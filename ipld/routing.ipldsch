
type Envelope union {
     | GetP2PProvideRequest "get-p2p-provide-request"
     | GetP2PProvideResponse "get-p2p-provide-response"
} representation keyed

type Multihash struct {
     Bytes Bytes
}

type GetP2PProvideRequest struct {
     Keys [Multihash]   # multihash vs raw?
}

type GetP2PProvideResponse struct {
     ProvidersByKey {Multihash : Provider}
}

type Provider struct {
     Node [Node]
     Proto [TransferProtocol]
     # can include other provider record meta here, e.g. the provenance of the provider record itself
}

# Node describes a node (identity, network address, authentication, whatever else applies)
# We expect different types of nodes, e.g. peer, miner, public IP, etc.
type Node union {
     | Peer "peer"
} representation keyed

type Peer struct {
     ID Bytes
     Multiaddresses [Bytes]
}

type TransferProtocol union {
     | BitswapTransfer "bitswap"
} representation keyed

type BitswapTransfer struct {}

# XXX: can we have a union representation that tries to parse in order of rules?
# XXX: how to accomplish pass through? can struct deser place out-of-schema data in a "leftover" field?
