
type ServiceEnvelope union {
     | GetP2PProvideRequest "get-p2p-provide-request"
     | GetP2PProvideResponse "get-p2p-provide-response"
} representation keyed
# XXX: we want an envelope representation here,
# because the envelope "key" field allows us to distinguish a function call/return from other things.
# Unfortunatly, it is not implemented in bindnode.

# XXX: IPLD schema type aliases are not implemented, so we can't do:
# type Multihash = Bytes
type Multihash struct {
     Bytes Bytes
}

type GetP2PProvideRequest struct {
     Keys [Multihash]
}

type ProvidersByKey struct {
	Key Multihash
	Provider Provider
}

type GetP2PProvideResponse struct {
     # XXX: ProvidersByKey {Multihash : Provider} is not possible in IPLD schema, instead:
	ProvidersByKey [ProvidersByKey]
}

type Provider struct {
     Node [Node]
     Proto [TransferProtocol]
     # can include other provider record meta here, e.g. the provenance of the provider record itself
}

# Node describes a node (identity, network address, authentication, whatever else applies)
# We expect different types of nodes, e.g. peer, miner, public IP, etc.
type Node union {
     | Peer "peer"
} representation keyed

type Peer struct {
     ID Bytes
     Multiaddresses [Bytes]
}

type TransferProtocol union {
     | BitswapTransfer "bitswap"
} representation keyed

type BitswapTransfer struct {}
