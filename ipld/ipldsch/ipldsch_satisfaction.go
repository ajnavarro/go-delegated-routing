package ipldsch

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	"github.com/ipld/go-ipld-prime/datamodel"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

func (n Bool) Bool() bool {
	return n.x
}
func (_Bool__Prototype) FromBool(v bool) (Bool, error) {
	n := _Bool{v}
	return &n, nil
}

type _Bool__Maybe struct {
	m schema.Maybe
	v _Bool
}
type MaybeBool = *_Bool__Maybe

func (m MaybeBool) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBool) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBool) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBool) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBool) Must() Bool {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Bool)(&_Bool{})
var _ schema.TypedNode = (Bool)(&_Bool{})

func (Bool) Kind() datamodel.Kind {
	return datamodel.Kind_Bool
}
func (Bool) LookupByString(string) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "ipldsch.Bool"}.LookupByString("")
}
func (Bool) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "ipldsch.Bool"}.LookupByNode(nil)
}
func (Bool) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "ipldsch.Bool"}.LookupByIndex(0)
}
func (Bool) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "ipldsch.Bool"}.LookupBySegment(seg)
}
func (Bool) MapIterator() datamodel.MapIterator {
	return nil
}
func (Bool) ListIterator() datamodel.ListIterator {
	return nil
}
func (Bool) Length() int64 {
	return -1
}
func (Bool) IsAbsent() bool {
	return false
}
func (Bool) IsNull() bool {
	return false
}
func (n Bool) AsBool() (bool, error) {
	return n.x, nil
}
func (Bool) AsInt() (int64, error) {
	return mixins.Bool{TypeName: "ipldsch.Bool"}.AsInt()
}
func (Bool) AsFloat() (float64, error) {
	return mixins.Bool{TypeName: "ipldsch.Bool"}.AsFloat()
}
func (Bool) AsString() (string, error) {
	return mixins.Bool{TypeName: "ipldsch.Bool"}.AsString()
}
func (Bool) AsBytes() ([]byte, error) {
	return mixins.Bool{TypeName: "ipldsch.Bool"}.AsBytes()
}
func (Bool) AsLink() (datamodel.Link, error) {
	return mixins.Bool{TypeName: "ipldsch.Bool"}.AsLink()
}
func (Bool) Prototype() datamodel.NodePrototype {
	return _Bool__Prototype{}
}

type _Bool__Prototype struct{}

func (_Bool__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Bool__Builder
	nb.Reset()
	return &nb
}

type _Bool__Builder struct {
	_Bool__Assembler
}

func (nb *_Bool__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bool__Builder) Reset() {
	var w _Bool
	var m schema.Maybe
	*nb = _Bool__Builder{_Bool__Assembler{w: &w, m: &m}}
}

type _Bool__Assembler struct {
	w *_Bool
	m *schema.Maybe
}

func (na *_Bool__Assembler) reset() {}
func (_Bool__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.BoolAssembler{TypeName: "ipldsch.Bool"}.BeginMap(0)
}
func (_Bool__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.BoolAssembler{TypeName: "ipldsch.Bool"}.BeginList(0)
}
func (na *_Bool__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BoolAssembler{TypeName: "ipldsch.Bool"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (na *_Bool__Assembler) AssignBool(v bool) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bool__Assembler) AssignInt(int64) error {
	return mixins.BoolAssembler{TypeName: "ipldsch.Bool"}.AssignInt(0)
}
func (_Bool__Assembler) AssignFloat(float64) error {
	return mixins.BoolAssembler{TypeName: "ipldsch.Bool"}.AssignFloat(0)
}
func (_Bool__Assembler) AssignString(string) error {
	return mixins.BoolAssembler{TypeName: "ipldsch.Bool"}.AssignString("")
}
func (_Bool__Assembler) AssignBytes([]byte) error {
	return mixins.BoolAssembler{TypeName: "ipldsch.Bool"}.AssignBytes(nil)
}
func (_Bool__Assembler) AssignLink(datamodel.Link) error {
	return mixins.BoolAssembler{TypeName: "ipldsch.Bool"}.AssignLink(nil)
}
func (na *_Bool__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bool); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBool(); err != nil {
		return err
	} else {
		return na.AssignBool(v2)
	}
}
func (_Bool__Assembler) Prototype() datamodel.NodePrototype {
	return _Bool__Prototype{}
}
func (Bool) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bool) Representation() datamodel.Node {
	return (*_Bool__Repr)(n)
}

type _Bool__Repr = _Bool

var _ datamodel.Node = &_Bool__Repr{}

type _Bool__ReprPrototype = _Bool__Prototype
type _Bool__ReprAssembler = _Bool__Assembler

func (n Bytes) Bytes() []byte {
	return n.x
}
func (_Bytes__Prototype) FromBytes(v []byte) (Bytes, error) {
	n := _Bytes{v}
	return &n, nil
}

type _Bytes__Maybe struct {
	m schema.Maybe
	v _Bytes
}
type MaybeBytes = *_Bytes__Maybe

func (m MaybeBytes) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBytes) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBytes) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBytes) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBytes) Must() Bytes {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Bytes)(&_Bytes{})
var _ schema.TypedNode = (Bytes)(&_Bytes{})

func (Bytes) Kind() datamodel.Kind {
	return datamodel.Kind_Bytes
}
func (Bytes) LookupByString(string) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "ipldsch.Bytes"}.LookupByString("")
}
func (Bytes) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "ipldsch.Bytes"}.LookupByNode(nil)
}
func (Bytes) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "ipldsch.Bytes"}.LookupByIndex(0)
}
func (Bytes) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "ipldsch.Bytes"}.LookupBySegment(seg)
}
func (Bytes) MapIterator() datamodel.MapIterator {
	return nil
}
func (Bytes) ListIterator() datamodel.ListIterator {
	return nil
}
func (Bytes) Length() int64 {
	return -1
}
func (Bytes) IsAbsent() bool {
	return false
}
func (Bytes) IsNull() bool {
	return false
}
func (Bytes) AsBool() (bool, error) {
	return mixins.Bytes{TypeName: "ipldsch.Bytes"}.AsBool()
}
func (Bytes) AsInt() (int64, error) {
	return mixins.Bytes{TypeName: "ipldsch.Bytes"}.AsInt()
}
func (Bytes) AsFloat() (float64, error) {
	return mixins.Bytes{TypeName: "ipldsch.Bytes"}.AsFloat()
}
func (Bytes) AsString() (string, error) {
	return mixins.Bytes{TypeName: "ipldsch.Bytes"}.AsString()
}
func (n Bytes) AsBytes() ([]byte, error) {
	return n.x, nil
}
func (Bytes) AsLink() (datamodel.Link, error) {
	return mixins.Bytes{TypeName: "ipldsch.Bytes"}.AsLink()
}
func (Bytes) Prototype() datamodel.NodePrototype {
	return _Bytes__Prototype{}
}

type _Bytes__Prototype struct{}

func (_Bytes__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Bytes__Builder
	nb.Reset()
	return &nb
}

type _Bytes__Builder struct {
	_Bytes__Assembler
}

func (nb *_Bytes__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bytes__Builder) Reset() {
	var w _Bytes
	var m schema.Maybe
	*nb = _Bytes__Builder{_Bytes__Assembler{w: &w, m: &m}}
}

type _Bytes__Assembler struct {
	w *_Bytes
	m *schema.Maybe
}

func (na *_Bytes__Assembler) reset() {}
func (_Bytes__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.BytesAssembler{TypeName: "ipldsch.Bytes"}.BeginMap(0)
}
func (_Bytes__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.BytesAssembler{TypeName: "ipldsch.Bytes"}.BeginList(0)
}
func (na *_Bytes__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BytesAssembler{TypeName: "ipldsch.Bytes"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Bytes__Assembler) AssignBool(bool) error {
	return mixins.BytesAssembler{TypeName: "ipldsch.Bytes"}.AssignBool(false)
}
func (_Bytes__Assembler) AssignInt(int64) error {
	return mixins.BytesAssembler{TypeName: "ipldsch.Bytes"}.AssignInt(0)
}
func (_Bytes__Assembler) AssignFloat(float64) error {
	return mixins.BytesAssembler{TypeName: "ipldsch.Bytes"}.AssignFloat(0)
}
func (_Bytes__Assembler) AssignString(string) error {
	return mixins.BytesAssembler{TypeName: "ipldsch.Bytes"}.AssignString("")
}
func (na *_Bytes__Assembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bytes__Assembler) AssignLink(datamodel.Link) error {
	return mixins.BytesAssembler{TypeName: "ipldsch.Bytes"}.AssignLink(nil)
}
func (na *_Bytes__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBytes(); err != nil {
		return err
	} else {
		return na.AssignBytes(v2)
	}
}
func (_Bytes__Assembler) Prototype() datamodel.NodePrototype {
	return _Bytes__Prototype{}
}
func (Bytes) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bytes) Representation() datamodel.Node {
	return (*_Bytes__Repr)(n)
}

type _Bytes__Repr = _Bytes

var _ datamodel.Node = &_Bytes__Repr{}

type _Bytes__ReprPrototype = _Bytes__Prototype
type _Bytes__ReprAssembler = _Bytes__Assembler

func (n _Envelope) AsInterface() _Envelope__iface {
	switch n.tag {
	case 1:
		return &n.x1
	case 2:
		return &n.x2
	default:
		panic("invalid union state; how did you create this object?")
	}
}

type _Envelope__Maybe struct {
	m schema.Maybe
	v Envelope
}
type MaybeEnvelope = *_Envelope__Maybe

func (m MaybeEnvelope) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeEnvelope) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeEnvelope) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeEnvelope) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeEnvelope) Must() Envelope {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	memberName__Envelope_GetP2PProvideRequest  = _String{"GetP2PProvideRequest"}
	memberName__Envelope_GetP2PProvideResponse = _String{"GetP2PProvideResponse"}
)
var _ datamodel.Node = (Envelope)(&_Envelope{})
var _ schema.TypedNode = (Envelope)(&_Envelope{})

func (Envelope) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Envelope) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "GetP2PProvideRequest":
		if n.tag != 1 {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return &n.x1, nil
	case "GetP2PProvideResponse":
		if n.tag != 2 {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return &n.x2, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n Envelope) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Envelope) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope"}.LookupByIndex(0)
}
func (n Envelope) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Envelope) MapIterator() datamodel.MapIterator {
	return &_Envelope__MapItr{n, false}
}

type _Envelope__MapItr struct {
	n    Envelope
	done bool
}

func (itr *_Envelope__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.done {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		k, v = &memberName__Envelope_GetP2PProvideRequest, &itr.n.x1
	case 2:
		k, v = &memberName__Envelope_GetP2PProvideResponse, &itr.n.x2
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Envelope__MapItr) Done() bool {
	return itr.done
}

func (Envelope) ListIterator() datamodel.ListIterator {
	return nil
}
func (Envelope) Length() int64 {
	return 1
}
func (Envelope) IsAbsent() bool {
	return false
}
func (Envelope) IsNull() bool {
	return false
}
func (Envelope) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope"}.AsBool()
}
func (Envelope) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope"}.AsInt()
}
func (Envelope) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope"}.AsFloat()
}
func (Envelope) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope"}.AsString()
}
func (Envelope) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope"}.AsBytes()
}
func (Envelope) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope"}.AsLink()
}
func (Envelope) Prototype() datamodel.NodePrototype {
	return _Envelope__Prototype{}
}

type _Envelope__Prototype struct{}

func (_Envelope__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Envelope__Builder
	nb.Reset()
	return &nb
}

type _Envelope__Builder struct {
	_Envelope__Assembler
}

func (nb *_Envelope__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Envelope__Builder) Reset() {
	var w _Envelope
	var m schema.Maybe
	*nb = _Envelope__Builder{_Envelope__Assembler{w: &w, m: &m}}
}

type _Envelope__Assembler struct {
	w     *_Envelope
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 _GetP2PProvideRequest__Assembler

	ca2 _GetP2PProvideResponse__Assembler
	ca  uint
}

func (na *_Envelope__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Envelope__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Envelope{}
	}
	return na, nil
}
func (_Envelope__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope"}.BeginList(0)
}
func (na *_Envelope__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldsch.Envelope"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Envelope__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope"}.AssignBool(false)
}
func (_Envelope__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope"}.AssignInt(0)
}
func (_Envelope__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope"}.AssignFloat(0)
}
func (_Envelope__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope"}.AssignString("")
}
func (_Envelope__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope"}.AssignBytes(nil)
}
func (_Envelope__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope"}.AssignLink(nil)
}
func (na *_Envelope__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Envelope); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.Envelope", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Envelope__Assembler) Prototype() datamodel.NodePrototype {
	return _Envelope__Prototype{}
}
func (ma *_Envelope__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Envelope__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "ipldsch.Envelope", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "GetP2PProvideRequest":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	case "GetP2PProvideResponse":
		ma.state = maState_midValue
		ma.ca = 2
		ma.w.tag = 2
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "ipldsch.Envelope", Key: &_String{k}}
}
func (ma *_Envelope__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Envelope__KeyAssembler)(ma)
}
func (ma *_Envelope__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 1:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	case 2:
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2
	default:
		panic("unreachable")
	}
}
func (ma *_Envelope__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldsch.Envelope", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Envelope__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Envelope__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	switch k {
	case "GetP2PProvideRequest":
		return _GetP2PProvideRequest__Prototype{}
	case "GetP2PProvideResponse":
		return _GetP2PProvideResponse__Prototype{}
	default:
		return nil
	}
}

type _Envelope__KeyAssembler _Envelope__Assembler

func (_Envelope__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.KeyAssembler"}.BeginMap(0)
}
func (_Envelope__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.KeyAssembler"}.BeginList(0)
}
func (na *_Envelope__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.KeyAssembler"}.AssignNull()
}
func (_Envelope__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.KeyAssembler"}.AssignBool(false)
}
func (_Envelope__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.KeyAssembler"}.AssignInt(0)
}
func (_Envelope__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Envelope__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldsch.Envelope", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "GetP2PProvideRequest":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	case "GetP2PProvideResponse":
		ka.ca = 2
		ka.w.tag = 2
		ka.state = maState_expectValue
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "ipldsch.Envelope", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_Envelope__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.KeyAssembler"}.AssignBytes(nil)
}
func (_Envelope__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Envelope__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Envelope__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (Envelope) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Envelope) Representation() datamodel.Node {
	return (*_Envelope__Repr)(n)
}

type _Envelope__Repr _Envelope

var (
	memberName__Envelope_GetP2PProvideRequest_serial  = _String{"get-p2p-provide-request"}
	memberName__Envelope_GetP2PProvideResponse_serial = _String{"get-p2p-provide-response"}
)
var _ datamodel.Node = &_Envelope__Repr{}

func (_Envelope__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_Envelope__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "get-p2p-provide-request":
		if n.tag != 1 {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.x1.Representation(), nil
	case "get-p2p-provide-response":
		if n.tag != 2 {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.x2.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_Envelope__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Envelope__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope.Repr"}.LookupByIndex(0)
}
func (n _Envelope__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Envelope__Repr) MapIterator() datamodel.MapIterator {
	return &_Envelope__ReprMapItr{n, false}
}

type _Envelope__ReprMapItr struct {
	n    *_Envelope__Repr
	done bool
}

func (itr *_Envelope__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.done {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		k, v = &memberName__Envelope_GetP2PProvideRequest_serial, itr.n.x1.Representation()
	case 2:
		k, v = &memberName__Envelope_GetP2PProvideResponse_serial, itr.n.x2.Representation()
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Envelope__ReprMapItr) Done() bool {
	return itr.done
}

func (_Envelope__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (_Envelope__Repr) Length() int64 {
	return 1
}
func (_Envelope__Repr) IsAbsent() bool {
	return false
}
func (_Envelope__Repr) IsNull() bool {
	return false
}
func (_Envelope__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope.Repr"}.AsBool()
}
func (_Envelope__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope.Repr"}.AsInt()
}
func (_Envelope__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope.Repr"}.AsFloat()
}
func (_Envelope__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope.Repr"}.AsString()
}
func (_Envelope__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope.Repr"}.AsBytes()
}
func (_Envelope__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "ipldsch.Envelope.Repr"}.AsLink()
}
func (_Envelope__Repr) Prototype() datamodel.NodePrototype {
	return _Envelope__ReprPrototype{}
}

type _Envelope__ReprPrototype struct{}

func (_Envelope__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Envelope__ReprBuilder
	nb.Reset()
	return &nb
}

type _Envelope__ReprBuilder struct {
	_Envelope__ReprAssembler
}

func (nb *_Envelope__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Envelope__ReprBuilder) Reset() {
	var w _Envelope
	var m schema.Maybe
	*nb = _Envelope__ReprBuilder{_Envelope__ReprAssembler{w: &w, m: &m}}
}

type _Envelope__ReprAssembler struct {
	w     *_Envelope
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 _GetP2PProvideRequest__ReprAssembler

	ca2 _GetP2PProvideResponse__ReprAssembler
	ca  uint
}

func (na *_Envelope__ReprAssembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Envelope__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Envelope{}
	}
	return na, nil
}
func (_Envelope__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope.Repr"}.BeginList(0)
}
func (na *_Envelope__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldsch.Envelope.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Envelope__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope.Repr"}.AssignBool(false)
}
func (_Envelope__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope.Repr"}.AssignInt(0)
}
func (_Envelope__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope.Repr"}.AssignFloat(0)
}
func (_Envelope__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope.Repr"}.AssignString("")
}
func (_Envelope__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope.Repr"}.AssignBytes(nil)
}
func (_Envelope__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Envelope.Repr"}.AssignLink(nil)
}
func (na *_Envelope__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Envelope); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.Envelope.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Envelope__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Envelope__ReprPrototype{}
}
func (ma *_Envelope__ReprAssembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Envelope__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "ipldsch.Envelope.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "get-p2p-provide-request":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	case "get-p2p-provide-response":
		ma.state = maState_midValue
		ma.ca = 2
		ma.w.tag = 2
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "ipldsch.Envelope.Repr", Key: &_String{k}}
}
func (ma *_Envelope__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Envelope__ReprKeyAssembler)(ma)
}
func (ma *_Envelope__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 1:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	case 2:
		ma.ca2.w = &ma.w.x2
		ma.ca2.m = &ma.cm
		return &ma.ca2
	default:
		panic("unreachable")
	}
}
func (ma *_Envelope__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldsch.Envelope.Repr", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Envelope__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Envelope__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	switch k {
	case "GetP2PProvideRequest":
		return _GetP2PProvideRequest__ReprPrototype{}
	case "GetP2PProvideResponse":
		return _GetP2PProvideResponse__ReprPrototype{}
	default:
		return nil
	}
}

type _Envelope__ReprKeyAssembler _Envelope__ReprAssembler

func (_Envelope__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Envelope__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Envelope__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.Repr.KeyAssembler"}.AssignNull()
}
func (_Envelope__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Envelope__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Envelope__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Envelope__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldsch.Envelope.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "get-p2p-provide-request":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	case "get-p2p-provide-response":
		ka.ca = 2
		ka.w.tag = 2
		ka.state = maState_expectValue
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "ipldsch.Envelope.Repr", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_Envelope__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Envelope__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Envelope.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Envelope__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Envelope__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n Float) Float() float64 {
	return n.x
}
func (_Float__Prototype) FromFloat(v float64) (Float, error) {
	n := _Float{v}
	return &n, nil
}

type _Float__Maybe struct {
	m schema.Maybe
	v _Float
}
type MaybeFloat = *_Float__Maybe

func (m MaybeFloat) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeFloat) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeFloat) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeFloat) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeFloat) Must() Float {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Float)(&_Float{})
var _ schema.TypedNode = (Float)(&_Float{})

func (Float) Kind() datamodel.Kind {
	return datamodel.Kind_Float
}
func (Float) LookupByString(string) (datamodel.Node, error) {
	return mixins.Float{TypeName: "ipldsch.Float"}.LookupByString("")
}
func (Float) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Float{TypeName: "ipldsch.Float"}.LookupByNode(nil)
}
func (Float) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Float{TypeName: "ipldsch.Float"}.LookupByIndex(0)
}
func (Float) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Float{TypeName: "ipldsch.Float"}.LookupBySegment(seg)
}
func (Float) MapIterator() datamodel.MapIterator {
	return nil
}
func (Float) ListIterator() datamodel.ListIterator {
	return nil
}
func (Float) Length() int64 {
	return -1
}
func (Float) IsAbsent() bool {
	return false
}
func (Float) IsNull() bool {
	return false
}
func (Float) AsBool() (bool, error) {
	return mixins.Float{TypeName: "ipldsch.Float"}.AsBool()
}
func (Float) AsInt() (int64, error) {
	return mixins.Float{TypeName: "ipldsch.Float"}.AsInt()
}
func (n Float) AsFloat() (float64, error) {
	return n.x, nil
}
func (Float) AsString() (string, error) {
	return mixins.Float{TypeName: "ipldsch.Float"}.AsString()
}
func (Float) AsBytes() ([]byte, error) {
	return mixins.Float{TypeName: "ipldsch.Float"}.AsBytes()
}
func (Float) AsLink() (datamodel.Link, error) {
	return mixins.Float{TypeName: "ipldsch.Float"}.AsLink()
}
func (Float) Prototype() datamodel.NodePrototype {
	return _Float__Prototype{}
}

type _Float__Prototype struct{}

func (_Float__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Float__Builder
	nb.Reset()
	return &nb
}

type _Float__Builder struct {
	_Float__Assembler
}

func (nb *_Float__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Float__Builder) Reset() {
	var w _Float
	var m schema.Maybe
	*nb = _Float__Builder{_Float__Assembler{w: &w, m: &m}}
}

type _Float__Assembler struct {
	w *_Float
	m *schema.Maybe
}

func (na *_Float__Assembler) reset() {}
func (_Float__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.FloatAssembler{TypeName: "ipldsch.Float"}.BeginMap(0)
}
func (_Float__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.FloatAssembler{TypeName: "ipldsch.Float"}.BeginList(0)
}
func (na *_Float__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.FloatAssembler{TypeName: "ipldsch.Float"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Float__Assembler) AssignBool(bool) error {
	return mixins.FloatAssembler{TypeName: "ipldsch.Float"}.AssignBool(false)
}
func (_Float__Assembler) AssignInt(int64) error {
	return mixins.FloatAssembler{TypeName: "ipldsch.Float"}.AssignInt(0)
}
func (na *_Float__Assembler) AssignFloat(v float64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Float__Assembler) AssignString(string) error {
	return mixins.FloatAssembler{TypeName: "ipldsch.Float"}.AssignString("")
}
func (_Float__Assembler) AssignBytes([]byte) error {
	return mixins.FloatAssembler{TypeName: "ipldsch.Float"}.AssignBytes(nil)
}
func (_Float__Assembler) AssignLink(datamodel.Link) error {
	return mixins.FloatAssembler{TypeName: "ipldsch.Float"}.AssignLink(nil)
}
func (na *_Float__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Float); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsFloat(); err != nil {
		return err
	} else {
		return na.AssignFloat(v2)
	}
}
func (_Float__Assembler) Prototype() datamodel.NodePrototype {
	return _Float__Prototype{}
}
func (Float) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Float) Representation() datamodel.Node {
	return (*_Float__Repr)(n)
}

type _Float__Repr = _Float

var _ datamodel.Node = &_Float__Repr{}

type _Float__ReprPrototype = _Float__Prototype
type _Float__ReprAssembler = _Float__Assembler

func (n _GetP2PProvideRequest) FieldKey() Bytes {
	return &n.key
}

type _GetP2PProvideRequest__Maybe struct {
	m schema.Maybe
	v GetP2PProvideRequest
}
type MaybeGetP2PProvideRequest = *_GetP2PProvideRequest__Maybe

func (m MaybeGetP2PProvideRequest) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeGetP2PProvideRequest) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeGetP2PProvideRequest) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeGetP2PProvideRequest) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeGetP2PProvideRequest) Must() GetP2PProvideRequest {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__GetP2PProvideRequest_Key = _String{"key"}
)
var _ datamodel.Node = (GetP2PProvideRequest)(&_GetP2PProvideRequest{})
var _ schema.TypedNode = (GetP2PProvideRequest)(&_GetP2PProvideRequest{})

func (GetP2PProvideRequest) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n GetP2PProvideRequest) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "key":
		return &n.key, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n GetP2PProvideRequest) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (GetP2PProvideRequest) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest"}.LookupByIndex(0)
}
func (n GetP2PProvideRequest) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n GetP2PProvideRequest) MapIterator() datamodel.MapIterator {
	return &_GetP2PProvideRequest__MapItr{n, 0}
}

type _GetP2PProvideRequest__MapItr struct {
	n   GetP2PProvideRequest
	idx int
}

func (itr *_GetP2PProvideRequest__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__GetP2PProvideRequest_Key
		v = &itr.n.key
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_GetP2PProvideRequest__MapItr) Done() bool {
	return itr.idx >= 1
}

func (GetP2PProvideRequest) ListIterator() datamodel.ListIterator {
	return nil
}
func (GetP2PProvideRequest) Length() int64 {
	return 1
}
func (GetP2PProvideRequest) IsAbsent() bool {
	return false
}
func (GetP2PProvideRequest) IsNull() bool {
	return false
}
func (GetP2PProvideRequest) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest"}.AsBool()
}
func (GetP2PProvideRequest) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest"}.AsInt()
}
func (GetP2PProvideRequest) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest"}.AsFloat()
}
func (GetP2PProvideRequest) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest"}.AsString()
}
func (GetP2PProvideRequest) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest"}.AsBytes()
}
func (GetP2PProvideRequest) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest"}.AsLink()
}
func (GetP2PProvideRequest) Prototype() datamodel.NodePrototype {
	return _GetP2PProvideRequest__Prototype{}
}

type _GetP2PProvideRequest__Prototype struct{}

func (_GetP2PProvideRequest__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _GetP2PProvideRequest__Builder
	nb.Reset()
	return &nb
}

type _GetP2PProvideRequest__Builder struct {
	_GetP2PProvideRequest__Assembler
}

func (nb *_GetP2PProvideRequest__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_GetP2PProvideRequest__Builder) Reset() {
	var w _GetP2PProvideRequest
	var m schema.Maybe
	*nb = _GetP2PProvideRequest__Builder{_GetP2PProvideRequest__Assembler{w: &w, m: &m}}
}

type _GetP2PProvideRequest__Assembler struct {
	w     *_GetP2PProvideRequest
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm     schema.Maybe
	ca_key _Bytes__Assembler
}

func (na *_GetP2PProvideRequest__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_key.reset()
}

var (
	fieldBit__GetP2PProvideRequest_Key         = 1 << 0
	fieldBits__GetP2PProvideRequest_sufficient = 0 + 1<<0
)

func (na *_GetP2PProvideRequest__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_GetP2PProvideRequest{}
	}
	return na, nil
}
func (_GetP2PProvideRequest__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest"}.BeginList(0)
}
func (na *_GetP2PProvideRequest__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_GetP2PProvideRequest__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest"}.AssignBool(false)
}
func (_GetP2PProvideRequest__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest"}.AssignInt(0)
}
func (_GetP2PProvideRequest__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest"}.AssignFloat(0)
}
func (_GetP2PProvideRequest__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest"}.AssignString("")
}
func (_GetP2PProvideRequest__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest"}.AssignBytes(nil)
}
func (_GetP2PProvideRequest__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest"}.AssignLink(nil)
}
func (na *_GetP2PProvideRequest__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_GetP2PProvideRequest); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.GetP2PProvideRequest", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_GetP2PProvideRequest__Assembler) Prototype() datamodel.NodePrototype {
	return _GetP2PProvideRequest__Prototype{}
}
func (ma *_GetP2PProvideRequest__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_key.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_GetP2PProvideRequest__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "key":
		if ma.s&fieldBit__GetP2PProvideRequest_Key != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__GetP2PProvideRequest_Key}
		}
		ma.s += fieldBit__GetP2PProvideRequest_Key
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_key.w = &ma.w.key
		ma.ca_key.m = &ma.cm
		return &ma.ca_key, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "ipldsch.GetP2PProvideRequest", Key: &_String{k}}
}
func (ma *_GetP2PProvideRequest__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_GetP2PProvideRequest__KeyAssembler)(ma)
}
func (ma *_GetP2PProvideRequest__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_key.w = &ma.w.key
		ma.ca_key.m = &ma.cm
		return &ma.ca_key
	default:
		panic("unreachable")
	}
}
func (ma *_GetP2PProvideRequest__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__GetP2PProvideRequest_sufficient != fieldBits__GetP2PProvideRequest_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__GetP2PProvideRequest_Key == 0 {
			err.Missing = append(err.Missing, "key")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_GetP2PProvideRequest__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_GetP2PProvideRequest__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _GetP2PProvideRequest__KeyAssembler _GetP2PProvideRequest__Assembler

func (_GetP2PProvideRequest__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.KeyAssembler"}.BeginMap(0)
}
func (_GetP2PProvideRequest__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.KeyAssembler"}.BeginList(0)
}
func (na *_GetP2PProvideRequest__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.KeyAssembler"}.AssignNull()
}
func (_GetP2PProvideRequest__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.KeyAssembler"}.AssignBool(false)
}
func (_GetP2PProvideRequest__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.KeyAssembler"}.AssignInt(0)
}
func (_GetP2PProvideRequest__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.KeyAssembler"}.AssignFloat(0)
}
func (ka *_GetP2PProvideRequest__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "key":
		if ka.s&fieldBit__GetP2PProvideRequest_Key != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__GetP2PProvideRequest_Key}
		}
		ka.s += fieldBit__GetP2PProvideRequest_Key
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	default:
		return schema.ErrInvalidKey{TypeName: "ipldsch.GetP2PProvideRequest", Key: &_String{k}}
	}
}
func (_GetP2PProvideRequest__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.KeyAssembler"}.AssignBytes(nil)
}
func (_GetP2PProvideRequest__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.KeyAssembler"}.AssignLink(nil)
}
func (ka *_GetP2PProvideRequest__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_GetP2PProvideRequest__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (GetP2PProvideRequest) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n GetP2PProvideRequest) Representation() datamodel.Node {
	return (*_GetP2PProvideRequest__Repr)(n)
}

type _GetP2PProvideRequest__Repr _GetP2PProvideRequest

var (
	fieldName__GetP2PProvideRequest_Key_serial = _String{"key"}
)
var _ datamodel.Node = &_GetP2PProvideRequest__Repr{}

func (_GetP2PProvideRequest__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_GetP2PProvideRequest__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "key":
		return n.key.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_GetP2PProvideRequest__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_GetP2PProvideRequest__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.LookupByIndex(0)
}
func (n _GetP2PProvideRequest__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_GetP2PProvideRequest__Repr) MapIterator() datamodel.MapIterator {
	return &_GetP2PProvideRequest__ReprMapItr{n, 0}
}

type _GetP2PProvideRequest__ReprMapItr struct {
	n   *_GetP2PProvideRequest__Repr
	idx int
}

func (itr *_GetP2PProvideRequest__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__GetP2PProvideRequest_Key_serial
		v = itr.n.key.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_GetP2PProvideRequest__ReprMapItr) Done() bool {
	return itr.idx >= 1
}
func (_GetP2PProvideRequest__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_GetP2PProvideRequest__Repr) Length() int64 {
	l := 1
	return int64(l)
}
func (_GetP2PProvideRequest__Repr) IsAbsent() bool {
	return false
}
func (_GetP2PProvideRequest__Repr) IsNull() bool {
	return false
}
func (_GetP2PProvideRequest__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AsBool()
}
func (_GetP2PProvideRequest__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AsInt()
}
func (_GetP2PProvideRequest__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AsFloat()
}
func (_GetP2PProvideRequest__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AsString()
}
func (_GetP2PProvideRequest__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AsBytes()
}
func (_GetP2PProvideRequest__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AsLink()
}
func (_GetP2PProvideRequest__Repr) Prototype() datamodel.NodePrototype {
	return _GetP2PProvideRequest__ReprPrototype{}
}

type _GetP2PProvideRequest__ReprPrototype struct{}

func (_GetP2PProvideRequest__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _GetP2PProvideRequest__ReprBuilder
	nb.Reset()
	return &nb
}

type _GetP2PProvideRequest__ReprBuilder struct {
	_GetP2PProvideRequest__ReprAssembler
}

func (nb *_GetP2PProvideRequest__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_GetP2PProvideRequest__ReprBuilder) Reset() {
	var w _GetP2PProvideRequest
	var m schema.Maybe
	*nb = _GetP2PProvideRequest__ReprBuilder{_GetP2PProvideRequest__ReprAssembler{w: &w, m: &m}}
}

type _GetP2PProvideRequest__ReprAssembler struct {
	w     *_GetP2PProvideRequest
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm     schema.Maybe
	ca_key _Bytes__ReprAssembler
}

func (na *_GetP2PProvideRequest__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_key.reset()
}
func (na *_GetP2PProvideRequest__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_GetP2PProvideRequest{}
	}
	return na, nil
}
func (_GetP2PProvideRequest__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.BeginList(0)
}
func (na *_GetP2PProvideRequest__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_GetP2PProvideRequest__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AssignBool(false)
}
func (_GetP2PProvideRequest__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AssignInt(0)
}
func (_GetP2PProvideRequest__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AssignFloat(0)
}
func (_GetP2PProvideRequest__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AssignString("")
}
func (_GetP2PProvideRequest__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AssignBytes(nil)
}
func (_GetP2PProvideRequest__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr"}.AssignLink(nil)
}
func (na *_GetP2PProvideRequest__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_GetP2PProvideRequest); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.GetP2PProvideRequest.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_GetP2PProvideRequest__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _GetP2PProvideRequest__ReprPrototype{}
}
func (ma *_GetP2PProvideRequest__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_GetP2PProvideRequest__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "key":
		if ma.s&fieldBit__GetP2PProvideRequest_Key != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__GetP2PProvideRequest_Key_serial}
		}
		ma.s += fieldBit__GetP2PProvideRequest_Key
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_key.w = &ma.w.key
		ma.ca_key.m = &ma.cm
		return &ma.ca_key, nil
	default:
	}
	return nil, schema.ErrInvalidKey{TypeName: "ipldsch.GetP2PProvideRequest.Repr", Key: &_String{k}}
}
func (ma *_GetP2PProvideRequest__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_GetP2PProvideRequest__ReprKeyAssembler)(ma)
}
func (ma *_GetP2PProvideRequest__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_key.w = &ma.w.key
		ma.ca_key.m = &ma.cm
		return &ma.ca_key
	default:
		panic("unreachable")
	}
}
func (ma *_GetP2PProvideRequest__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__GetP2PProvideRequest_sufficient != fieldBits__GetP2PProvideRequest_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__GetP2PProvideRequest_Key == 0 {
			err.Missing = append(err.Missing, "key")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_GetP2PProvideRequest__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_GetP2PProvideRequest__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _GetP2PProvideRequest__ReprKeyAssembler _GetP2PProvideRequest__ReprAssembler

func (_GetP2PProvideRequest__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr.KeyAssembler"}.BeginMap(0)
}
func (_GetP2PProvideRequest__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_GetP2PProvideRequest__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr.KeyAssembler"}.AssignNull()
}
func (_GetP2PProvideRequest__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr.KeyAssembler"}.AssignBool(false)
}
func (_GetP2PProvideRequest__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr.KeyAssembler"}.AssignInt(0)
}
func (_GetP2PProvideRequest__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_GetP2PProvideRequest__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "key":
		if ka.s&fieldBit__GetP2PProvideRequest_Key != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__GetP2PProvideRequest_Key_serial}
		}
		ka.s += fieldBit__GetP2PProvideRequest_Key
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "ipldsch.GetP2PProvideRequest.Repr", Key: &_String{k}}
}
func (_GetP2PProvideRequest__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_GetP2PProvideRequest__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideRequest.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_GetP2PProvideRequest__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_GetP2PProvideRequest__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n _GetP2PProvideResponse) FieldProviders() List__Provider {
	return &n.providers
}

type _GetP2PProvideResponse__Maybe struct {
	m schema.Maybe
	v GetP2PProvideResponse
}
type MaybeGetP2PProvideResponse = *_GetP2PProvideResponse__Maybe

func (m MaybeGetP2PProvideResponse) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeGetP2PProvideResponse) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeGetP2PProvideResponse) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeGetP2PProvideResponse) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeGetP2PProvideResponse) Must() GetP2PProvideResponse {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__GetP2PProvideResponse_Providers = _String{"providers"}
)
var _ datamodel.Node = (GetP2PProvideResponse)(&_GetP2PProvideResponse{})
var _ schema.TypedNode = (GetP2PProvideResponse)(&_GetP2PProvideResponse{})

func (GetP2PProvideResponse) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n GetP2PProvideResponse) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "providers":
		return &n.providers, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n GetP2PProvideResponse) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (GetP2PProvideResponse) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse"}.LookupByIndex(0)
}
func (n GetP2PProvideResponse) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n GetP2PProvideResponse) MapIterator() datamodel.MapIterator {
	return &_GetP2PProvideResponse__MapItr{n, 0}
}

type _GetP2PProvideResponse__MapItr struct {
	n   GetP2PProvideResponse
	idx int
}

func (itr *_GetP2PProvideResponse__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__GetP2PProvideResponse_Providers
		v = &itr.n.providers
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_GetP2PProvideResponse__MapItr) Done() bool {
	return itr.idx >= 1
}

func (GetP2PProvideResponse) ListIterator() datamodel.ListIterator {
	return nil
}
func (GetP2PProvideResponse) Length() int64 {
	return 1
}
func (GetP2PProvideResponse) IsAbsent() bool {
	return false
}
func (GetP2PProvideResponse) IsNull() bool {
	return false
}
func (GetP2PProvideResponse) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse"}.AsBool()
}
func (GetP2PProvideResponse) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse"}.AsInt()
}
func (GetP2PProvideResponse) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse"}.AsFloat()
}
func (GetP2PProvideResponse) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse"}.AsString()
}
func (GetP2PProvideResponse) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse"}.AsBytes()
}
func (GetP2PProvideResponse) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse"}.AsLink()
}
func (GetP2PProvideResponse) Prototype() datamodel.NodePrototype {
	return _GetP2PProvideResponse__Prototype{}
}

type _GetP2PProvideResponse__Prototype struct{}

func (_GetP2PProvideResponse__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _GetP2PProvideResponse__Builder
	nb.Reset()
	return &nb
}

type _GetP2PProvideResponse__Builder struct {
	_GetP2PProvideResponse__Assembler
}

func (nb *_GetP2PProvideResponse__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_GetP2PProvideResponse__Builder) Reset() {
	var w _GetP2PProvideResponse
	var m schema.Maybe
	*nb = _GetP2PProvideResponse__Builder{_GetP2PProvideResponse__Assembler{w: &w, m: &m}}
}

type _GetP2PProvideResponse__Assembler struct {
	w     *_GetP2PProvideResponse
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm           schema.Maybe
	ca_providers _List__Provider__Assembler
}

func (na *_GetP2PProvideResponse__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_providers.reset()
}

var (
	fieldBit__GetP2PProvideResponse_Providers   = 1 << 0
	fieldBits__GetP2PProvideResponse_sufficient = 0 + 1<<0
)

func (na *_GetP2PProvideResponse__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_GetP2PProvideResponse{}
	}
	return na, nil
}
func (_GetP2PProvideResponse__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse"}.BeginList(0)
}
func (na *_GetP2PProvideResponse__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_GetP2PProvideResponse__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse"}.AssignBool(false)
}
func (_GetP2PProvideResponse__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse"}.AssignInt(0)
}
func (_GetP2PProvideResponse__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse"}.AssignFloat(0)
}
func (_GetP2PProvideResponse__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse"}.AssignString("")
}
func (_GetP2PProvideResponse__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse"}.AssignBytes(nil)
}
func (_GetP2PProvideResponse__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse"}.AssignLink(nil)
}
func (na *_GetP2PProvideResponse__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_GetP2PProvideResponse); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.GetP2PProvideResponse", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_GetP2PProvideResponse__Assembler) Prototype() datamodel.NodePrototype {
	return _GetP2PProvideResponse__Prototype{}
}
func (ma *_GetP2PProvideResponse__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_providers.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_GetP2PProvideResponse__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "providers":
		if ma.s&fieldBit__GetP2PProvideResponse_Providers != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__GetP2PProvideResponse_Providers}
		}
		ma.s += fieldBit__GetP2PProvideResponse_Providers
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_providers.w = &ma.w.providers
		ma.ca_providers.m = &ma.cm
		return &ma.ca_providers, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "ipldsch.GetP2PProvideResponse", Key: &_String{k}}
}
func (ma *_GetP2PProvideResponse__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_GetP2PProvideResponse__KeyAssembler)(ma)
}
func (ma *_GetP2PProvideResponse__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_providers.w = &ma.w.providers
		ma.ca_providers.m = &ma.cm
		return &ma.ca_providers
	default:
		panic("unreachable")
	}
}
func (ma *_GetP2PProvideResponse__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__GetP2PProvideResponse_sufficient != fieldBits__GetP2PProvideResponse_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__GetP2PProvideResponse_Providers == 0 {
			err.Missing = append(err.Missing, "providers")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_GetP2PProvideResponse__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_GetP2PProvideResponse__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _GetP2PProvideResponse__KeyAssembler _GetP2PProvideResponse__Assembler

func (_GetP2PProvideResponse__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.KeyAssembler"}.BeginMap(0)
}
func (_GetP2PProvideResponse__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.KeyAssembler"}.BeginList(0)
}
func (na *_GetP2PProvideResponse__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.KeyAssembler"}.AssignNull()
}
func (_GetP2PProvideResponse__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.KeyAssembler"}.AssignBool(false)
}
func (_GetP2PProvideResponse__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.KeyAssembler"}.AssignInt(0)
}
func (_GetP2PProvideResponse__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.KeyAssembler"}.AssignFloat(0)
}
func (ka *_GetP2PProvideResponse__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "providers":
		if ka.s&fieldBit__GetP2PProvideResponse_Providers != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__GetP2PProvideResponse_Providers}
		}
		ka.s += fieldBit__GetP2PProvideResponse_Providers
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	default:
		return schema.ErrInvalidKey{TypeName: "ipldsch.GetP2PProvideResponse", Key: &_String{k}}
	}
}
func (_GetP2PProvideResponse__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.KeyAssembler"}.AssignBytes(nil)
}
func (_GetP2PProvideResponse__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.KeyAssembler"}.AssignLink(nil)
}
func (ka *_GetP2PProvideResponse__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_GetP2PProvideResponse__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (GetP2PProvideResponse) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n GetP2PProvideResponse) Representation() datamodel.Node {
	return (*_GetP2PProvideResponse__Repr)(n)
}

type _GetP2PProvideResponse__Repr _GetP2PProvideResponse

var (
	fieldName__GetP2PProvideResponse_Providers_serial = _String{"providers"}
)
var _ datamodel.Node = &_GetP2PProvideResponse__Repr{}

func (_GetP2PProvideResponse__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_GetP2PProvideResponse__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "providers":
		return n.providers.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_GetP2PProvideResponse__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_GetP2PProvideResponse__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.LookupByIndex(0)
}
func (n _GetP2PProvideResponse__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_GetP2PProvideResponse__Repr) MapIterator() datamodel.MapIterator {
	return &_GetP2PProvideResponse__ReprMapItr{n, 0}
}

type _GetP2PProvideResponse__ReprMapItr struct {
	n   *_GetP2PProvideResponse__Repr
	idx int
}

func (itr *_GetP2PProvideResponse__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__GetP2PProvideResponse_Providers_serial
		v = itr.n.providers.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_GetP2PProvideResponse__ReprMapItr) Done() bool {
	return itr.idx >= 1
}
func (_GetP2PProvideResponse__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_GetP2PProvideResponse__Repr) Length() int64 {
	l := 1
	return int64(l)
}
func (_GetP2PProvideResponse__Repr) IsAbsent() bool {
	return false
}
func (_GetP2PProvideResponse__Repr) IsNull() bool {
	return false
}
func (_GetP2PProvideResponse__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AsBool()
}
func (_GetP2PProvideResponse__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AsInt()
}
func (_GetP2PProvideResponse__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AsFloat()
}
func (_GetP2PProvideResponse__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AsString()
}
func (_GetP2PProvideResponse__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AsBytes()
}
func (_GetP2PProvideResponse__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AsLink()
}
func (_GetP2PProvideResponse__Repr) Prototype() datamodel.NodePrototype {
	return _GetP2PProvideResponse__ReprPrototype{}
}

type _GetP2PProvideResponse__ReprPrototype struct{}

func (_GetP2PProvideResponse__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _GetP2PProvideResponse__ReprBuilder
	nb.Reset()
	return &nb
}

type _GetP2PProvideResponse__ReprBuilder struct {
	_GetP2PProvideResponse__ReprAssembler
}

func (nb *_GetP2PProvideResponse__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_GetP2PProvideResponse__ReprBuilder) Reset() {
	var w _GetP2PProvideResponse
	var m schema.Maybe
	*nb = _GetP2PProvideResponse__ReprBuilder{_GetP2PProvideResponse__ReprAssembler{w: &w, m: &m}}
}

type _GetP2PProvideResponse__ReprAssembler struct {
	w     *_GetP2PProvideResponse
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm           schema.Maybe
	ca_providers _List__Provider__ReprAssembler
}

func (na *_GetP2PProvideResponse__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_providers.reset()
}
func (na *_GetP2PProvideResponse__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_GetP2PProvideResponse{}
	}
	return na, nil
}
func (_GetP2PProvideResponse__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.BeginList(0)
}
func (na *_GetP2PProvideResponse__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_GetP2PProvideResponse__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AssignBool(false)
}
func (_GetP2PProvideResponse__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AssignInt(0)
}
func (_GetP2PProvideResponse__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AssignFloat(0)
}
func (_GetP2PProvideResponse__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AssignString("")
}
func (_GetP2PProvideResponse__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AssignBytes(nil)
}
func (_GetP2PProvideResponse__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr"}.AssignLink(nil)
}
func (na *_GetP2PProvideResponse__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_GetP2PProvideResponse); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.GetP2PProvideResponse.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_GetP2PProvideResponse__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _GetP2PProvideResponse__ReprPrototype{}
}
func (ma *_GetP2PProvideResponse__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_GetP2PProvideResponse__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "providers":
		if ma.s&fieldBit__GetP2PProvideResponse_Providers != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__GetP2PProvideResponse_Providers_serial}
		}
		ma.s += fieldBit__GetP2PProvideResponse_Providers
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_providers.w = &ma.w.providers
		ma.ca_providers.m = &ma.cm
		return &ma.ca_providers, nil
	default:
	}
	return nil, schema.ErrInvalidKey{TypeName: "ipldsch.GetP2PProvideResponse.Repr", Key: &_String{k}}
}
func (ma *_GetP2PProvideResponse__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_GetP2PProvideResponse__ReprKeyAssembler)(ma)
}
func (ma *_GetP2PProvideResponse__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_providers.w = &ma.w.providers
		ma.ca_providers.m = &ma.cm
		return &ma.ca_providers
	default:
		panic("unreachable")
	}
}
func (ma *_GetP2PProvideResponse__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__GetP2PProvideResponse_sufficient != fieldBits__GetP2PProvideResponse_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__GetP2PProvideResponse_Providers == 0 {
			err.Missing = append(err.Missing, "providers")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_GetP2PProvideResponse__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_GetP2PProvideResponse__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _GetP2PProvideResponse__ReprKeyAssembler _GetP2PProvideResponse__ReprAssembler

func (_GetP2PProvideResponse__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr.KeyAssembler"}.BeginMap(0)
}
func (_GetP2PProvideResponse__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_GetP2PProvideResponse__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr.KeyAssembler"}.AssignNull()
}
func (_GetP2PProvideResponse__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr.KeyAssembler"}.AssignBool(false)
}
func (_GetP2PProvideResponse__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr.KeyAssembler"}.AssignInt(0)
}
func (_GetP2PProvideResponse__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_GetP2PProvideResponse__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "providers":
		if ka.s&fieldBit__GetP2PProvideResponse_Providers != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__GetP2PProvideResponse_Providers_serial}
		}
		ka.s += fieldBit__GetP2PProvideResponse_Providers
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "ipldsch.GetP2PProvideResponse.Repr", Key: &_String{k}}
}
func (_GetP2PProvideResponse__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_GetP2PProvideResponse__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "ipldsch.GetP2PProvideResponse.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_GetP2PProvideResponse__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_GetP2PProvideResponse__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n Int) Int() int64 {
	return n.x
}
func (_Int__Prototype) FromInt(v int64) (Int, error) {
	n := _Int{v}
	return &n, nil
}

type _Int__Maybe struct {
	m schema.Maybe
	v _Int
}
type MaybeInt = *_Int__Maybe

func (m MaybeInt) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeInt) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeInt) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeInt) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeInt) Must() Int {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Int)(&_Int{})
var _ schema.TypedNode = (Int)(&_Int{})

func (Int) Kind() datamodel.Kind {
	return datamodel.Kind_Int
}
func (Int) LookupByString(string) (datamodel.Node, error) {
	return mixins.Int{TypeName: "ipldsch.Int"}.LookupByString("")
}
func (Int) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Int{TypeName: "ipldsch.Int"}.LookupByNode(nil)
}
func (Int) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Int{TypeName: "ipldsch.Int"}.LookupByIndex(0)
}
func (Int) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Int{TypeName: "ipldsch.Int"}.LookupBySegment(seg)
}
func (Int) MapIterator() datamodel.MapIterator {
	return nil
}
func (Int) ListIterator() datamodel.ListIterator {
	return nil
}
func (Int) Length() int64 {
	return -1
}
func (Int) IsAbsent() bool {
	return false
}
func (Int) IsNull() bool {
	return false
}
func (Int) AsBool() (bool, error) {
	return mixins.Int{TypeName: "ipldsch.Int"}.AsBool()
}
func (n Int) AsInt() (int64, error) {
	return n.x, nil
}
func (Int) AsFloat() (float64, error) {
	return mixins.Int{TypeName: "ipldsch.Int"}.AsFloat()
}
func (Int) AsString() (string, error) {
	return mixins.Int{TypeName: "ipldsch.Int"}.AsString()
}
func (Int) AsBytes() ([]byte, error) {
	return mixins.Int{TypeName: "ipldsch.Int"}.AsBytes()
}
func (Int) AsLink() (datamodel.Link, error) {
	return mixins.Int{TypeName: "ipldsch.Int"}.AsLink()
}
func (Int) Prototype() datamodel.NodePrototype {
	return _Int__Prototype{}
}

type _Int__Prototype struct{}

func (_Int__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Int__Builder
	nb.Reset()
	return &nb
}

type _Int__Builder struct {
	_Int__Assembler
}

func (nb *_Int__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Int__Builder) Reset() {
	var w _Int
	var m schema.Maybe
	*nb = _Int__Builder{_Int__Assembler{w: &w, m: &m}}
}

type _Int__Assembler struct {
	w *_Int
	m *schema.Maybe
}

func (na *_Int__Assembler) reset() {}
func (_Int__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.IntAssembler{TypeName: "ipldsch.Int"}.BeginMap(0)
}
func (_Int__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.IntAssembler{TypeName: "ipldsch.Int"}.BeginList(0)
}
func (na *_Int__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.IntAssembler{TypeName: "ipldsch.Int"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Int__Assembler) AssignBool(bool) error {
	return mixins.IntAssembler{TypeName: "ipldsch.Int"}.AssignBool(false)
}
func (na *_Int__Assembler) AssignInt(v int64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Int__Assembler) AssignFloat(float64) error {
	return mixins.IntAssembler{TypeName: "ipldsch.Int"}.AssignFloat(0)
}
func (_Int__Assembler) AssignString(string) error {
	return mixins.IntAssembler{TypeName: "ipldsch.Int"}.AssignString("")
}
func (_Int__Assembler) AssignBytes([]byte) error {
	return mixins.IntAssembler{TypeName: "ipldsch.Int"}.AssignBytes(nil)
}
func (_Int__Assembler) AssignLink(datamodel.Link) error {
	return mixins.IntAssembler{TypeName: "ipldsch.Int"}.AssignLink(nil)
}
func (na *_Int__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Int); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsInt(); err != nil {
		return err
	} else {
		return na.AssignInt(v2)
	}
}
func (_Int__Assembler) Prototype() datamodel.NodePrototype {
	return _Int__Prototype{}
}
func (Int) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Int) Representation() datamodel.Node {
	return (*_Int__Repr)(n)
}

type _Int__Repr = _Int

var _ datamodel.Node = &_Int__Repr{}

type _Int__ReprPrototype = _Int__Prototype
type _Int__ReprAssembler = _Int__Assembler

func (n Link) Link() datamodel.Link {
	return n.x
}
func (_Link__Prototype) FromLink(v datamodel.Link) (Link, error) {
	n := _Link{v}
	return &n, nil
}

type _Link__Maybe struct {
	m schema.Maybe
	v _Link
}
type MaybeLink = *_Link__Maybe

func (m MaybeLink) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeLink) Must() Link {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Link)(&_Link{})
var _ schema.TypedNode = (Link)(&_Link{})

func (Link) Kind() datamodel.Kind {
	return datamodel.Kind_Link
}
func (Link) LookupByString(string) (datamodel.Node, error) {
	return mixins.Link{TypeName: "ipldsch.Link"}.LookupByString("")
}
func (Link) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Link{TypeName: "ipldsch.Link"}.LookupByNode(nil)
}
func (Link) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Link{TypeName: "ipldsch.Link"}.LookupByIndex(0)
}
func (Link) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Link{TypeName: "ipldsch.Link"}.LookupBySegment(seg)
}
func (Link) MapIterator() datamodel.MapIterator {
	return nil
}
func (Link) ListIterator() datamodel.ListIterator {
	return nil
}
func (Link) Length() int64 {
	return -1
}
func (Link) IsAbsent() bool {
	return false
}
func (Link) IsNull() bool {
	return false
}
func (Link) AsBool() (bool, error) {
	return mixins.Link{TypeName: "ipldsch.Link"}.AsBool()
}
func (Link) AsInt() (int64, error) {
	return mixins.Link{TypeName: "ipldsch.Link"}.AsInt()
}
func (Link) AsFloat() (float64, error) {
	return mixins.Link{TypeName: "ipldsch.Link"}.AsFloat()
}
func (Link) AsString() (string, error) {
	return mixins.Link{TypeName: "ipldsch.Link"}.AsString()
}
func (Link) AsBytes() ([]byte, error) {
	return mixins.Link{TypeName: "ipldsch.Link"}.AsBytes()
}
func (n Link) AsLink() (datamodel.Link, error) {
	return n.x, nil
}
func (Link) Prototype() datamodel.NodePrototype {
	return _Link__Prototype{}
}

type _Link__Prototype struct{}

func (_Link__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Link__Builder
	nb.Reset()
	return &nb
}

type _Link__Builder struct {
	_Link__Assembler
}

func (nb *_Link__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link__Builder) Reset() {
	var w _Link
	var m schema.Maybe
	*nb = _Link__Builder{_Link__Assembler{w: &w, m: &m}}
}

type _Link__Assembler struct {
	w *_Link
	m *schema.Maybe
}

func (na *_Link__Assembler) reset() {}
func (_Link__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.LinkAssembler{TypeName: "ipldsch.Link"}.BeginMap(0)
}
func (_Link__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.LinkAssembler{TypeName: "ipldsch.Link"}.BeginList(0)
}
func (na *_Link__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{TypeName: "ipldsch.Link"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{TypeName: "ipldsch.Link"}.AssignBool(false)
}
func (_Link__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{TypeName: "ipldsch.Link"}.AssignInt(0)
}
func (_Link__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{TypeName: "ipldsch.Link"}.AssignFloat(0)
}
func (_Link__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{TypeName: "ipldsch.Link"}.AssignString("")
}
func (_Link__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{TypeName: "ipldsch.Link"}.AssignBytes(nil)
}
func (na *_Link__Assembler) AssignLink(v datamodel.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link__Assembler) Prototype() datamodel.NodePrototype {
	return _Link__Prototype{}
}
func (Link) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Link) Representation() datamodel.Node {
	return (*_Link__Repr)(n)
}

type _Link__Repr = _Link

var _ datamodel.Node = &_Link__Repr{}

type _Link__ReprPrototype = _Link__Prototype
type _Link__ReprAssembler = _Link__Assembler

func (n *_List__Bytes) Lookup(idx int64) Bytes {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_List__Bytes) LookupMaybe(idx int64) MaybeBytes {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Bytes__Maybe{
		m: schema.Maybe_Value,
		v: *v,
	}
}

var _List__Bytes__valueAbsent = _Bytes__Maybe{m: schema.Maybe_Absent}

func (n List__Bytes) Iterator() *List__Bytes__Itr {
	return &List__Bytes__Itr{n, 0}
}

type List__Bytes__Itr struct {
	n   List__Bytes
	idx int
}

func (itr *List__Bytes__Itr) Next() (idx int64, v Bytes) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *List__Bytes__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _List__Bytes__Maybe struct {
	m schema.Maybe
	v _List__Bytes
}
type MaybeList__Bytes = *_List__Bytes__Maybe

func (m MaybeList__Bytes) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeList__Bytes) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeList__Bytes) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeList__Bytes) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeList__Bytes) Must() List__Bytes {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (List__Bytes)(&_List__Bytes{})
var _ schema.TypedNode = (List__Bytes)(&_List__Bytes{})

func (List__Bytes) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (List__Bytes) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes"}.LookupByString("")
}
func (n List__Bytes) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n List__Bytes) LookupByIndex(idx int64) (datamodel.Node, error) {
	if n.Length() <= idx {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n List__Bytes) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "ipldsch.List__Bytes", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (List__Bytes) MapIterator() datamodel.MapIterator {
	return nil
}
func (n List__Bytes) ListIterator() datamodel.ListIterator {
	return &_List__Bytes__ListItr{n, 0}
}

type _List__Bytes__ListItr struct {
	n   List__Bytes
	idx int
}

func (itr *_List__Bytes__ListItr) Next() (idx int64, v datamodel.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, datamodel.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_List__Bytes__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n List__Bytes) Length() int64 {
	return int64(len(n.x))
}
func (List__Bytes) IsAbsent() bool {
	return false
}
func (List__Bytes) IsNull() bool {
	return false
}
func (List__Bytes) AsBool() (bool, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes"}.AsBool()
}
func (List__Bytes) AsInt() (int64, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes"}.AsInt()
}
func (List__Bytes) AsFloat() (float64, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes"}.AsFloat()
}
func (List__Bytes) AsString() (string, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes"}.AsString()
}
func (List__Bytes) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes"}.AsBytes()
}
func (List__Bytes) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes"}.AsLink()
}
func (List__Bytes) Prototype() datamodel.NodePrototype {
	return _List__Bytes__Prototype{}
}

type _List__Bytes__Prototype struct{}

func (_List__Bytes__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List__Bytes__Builder
	nb.Reset()
	return &nb
}

type _List__Bytes__Builder struct {
	_List__Bytes__Assembler
}

func (nb *_List__Bytes__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__Bytes__Builder) Reset() {
	var w _List__Bytes
	var m schema.Maybe
	*nb = _List__Bytes__Builder{_List__Bytes__Assembler{w: &w, m: &m}}
}

type _List__Bytes__Assembler struct {
	w     *_List__Bytes
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Bytes__Assembler
}

func (na *_List__Bytes__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__Bytes__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes"}.BeginMap(0)
}
func (na *_List__Bytes__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Bytes, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__Bytes__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__Bytes__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes"}.AssignBool(false)
}
func (_List__Bytes__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes"}.AssignInt(0)
}
func (_List__Bytes__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes"}.AssignFloat(0)
}
func (_List__Bytes__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes"}.AssignString("")
}
func (_List__Bytes__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes"}.AssignBytes(nil)
}
func (_List__Bytes__Assembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes"}.AssignLink(nil)
}
func (na *_List__Bytes__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List__Bytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.List__Bytes", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__Bytes__Assembler) Prototype() datamodel.NodePrototype {
	return _List__Bytes__Prototype{}
}
func (la *_List__Bytes__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__Bytes__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Bytes{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List__Bytes__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__Bytes__Assembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Bytes__Prototype{}
}
func (List__Bytes) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n List__Bytes) Representation() datamodel.Node {
	return (*_List__Bytes__Repr)(n)
}

type _List__Bytes__Repr _List__Bytes

var _ datamodel.Node = &_List__Bytes__Repr{}

func (_List__Bytes__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (_List__Bytes__Repr) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes.Repr"}.LookupByString("")
}
func (nr *_List__Bytes__Repr) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	v, err := (List__Bytes)(nr).LookupByNode(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Bytes).Representation(), nil
}
func (nr *_List__Bytes__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	v, err := (List__Bytes)(nr).LookupByIndex(idx)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Bytes).Representation(), nil
}
func (n _List__Bytes__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "ipldsch.List__Bytes.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_List__Bytes__Repr) MapIterator() datamodel.MapIterator {
	return nil
}
func (nr *_List__Bytes__Repr) ListIterator() datamodel.ListIterator {
	return &_List__Bytes__ReprListItr{(List__Bytes)(nr), 0}
}

type _List__Bytes__ReprListItr _List__Bytes__ListItr

func (itr *_List__Bytes__ReprListItr) Next() (idx int64, v datamodel.Node, err error) {
	idx, v, err = (*_List__Bytes__ListItr)(itr).Next()
	if err != nil || v == datamodel.Null {
		return
	}
	return idx, v.(Bytes).Representation(), nil
}
func (itr *_List__Bytes__ReprListItr) Done() bool {
	return (*_List__Bytes__ListItr)(itr).Done()
}

func (rn *_List__Bytes__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_List__Bytes__Repr) IsAbsent() bool {
	return false
}
func (_List__Bytes__Repr) IsNull() bool {
	return false
}
func (_List__Bytes__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes.Repr"}.AsBool()
}
func (_List__Bytes__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes.Repr"}.AsInt()
}
func (_List__Bytes__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes.Repr"}.AsFloat()
}
func (_List__Bytes__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes.Repr"}.AsString()
}
func (_List__Bytes__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes.Repr"}.AsBytes()
}
func (_List__Bytes__Repr) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "ipldsch.List__Bytes.Repr"}.AsLink()
}
func (_List__Bytes__Repr) Prototype() datamodel.NodePrototype {
	return _List__Bytes__ReprPrototype{}
}

type _List__Bytes__ReprPrototype struct{}

func (_List__Bytes__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List__Bytes__ReprBuilder
	nb.Reset()
	return &nb
}

type _List__Bytes__ReprBuilder struct {
	_List__Bytes__ReprAssembler
}

func (nb *_List__Bytes__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__Bytes__ReprBuilder) Reset() {
	var w _List__Bytes
	var m schema.Maybe
	*nb = _List__Bytes__ReprBuilder{_List__Bytes__ReprAssembler{w: &w, m: &m}}
}

type _List__Bytes__ReprAssembler struct {
	w     *_List__Bytes
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Bytes__ReprAssembler
}

func (na *_List__Bytes__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__Bytes__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes.Repr"}.BeginMap(0)
}
func (na *_List__Bytes__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Bytes, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__Bytes__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__Bytes__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes.Repr"}.AssignBool(false)
}
func (_List__Bytes__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes.Repr"}.AssignInt(0)
}
func (_List__Bytes__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes.Repr"}.AssignFloat(0)
}
func (_List__Bytes__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes.Repr"}.AssignString("")
}
func (_List__Bytes__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes.Repr"}.AssignBytes(nil)
}
func (_List__Bytes__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Bytes.Repr"}.AssignLink(nil)
}
func (na *_List__Bytes__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List__Bytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.List__Bytes.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__Bytes__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _List__Bytes__ReprPrototype{}
}
func (la *_List__Bytes__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__Bytes__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Bytes{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List__Bytes__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__Bytes__ReprAssembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Bytes__ReprPrototype{}
}

func (n *_List__Provider) Lookup(idx int64) Provider {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_List__Provider) LookupMaybe(idx int64) MaybeProvider {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Provider__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _List__Provider__valueAbsent = _Provider__Maybe{m: schema.Maybe_Absent}

func (n List__Provider) Iterator() *List__Provider__Itr {
	return &List__Provider__Itr{n, 0}
}

type List__Provider__Itr struct {
	n   List__Provider
	idx int
}

func (itr *List__Provider__Itr) Next() (idx int64, v Provider) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *List__Provider__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _List__Provider__Maybe struct {
	m schema.Maybe
	v _List__Provider
}
type MaybeList__Provider = *_List__Provider__Maybe

func (m MaybeList__Provider) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeList__Provider) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeList__Provider) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeList__Provider) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeList__Provider) Must() List__Provider {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (List__Provider)(&_List__Provider{})
var _ schema.TypedNode = (List__Provider)(&_List__Provider{})

func (List__Provider) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (List__Provider) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider"}.LookupByString("")
}
func (n List__Provider) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n List__Provider) LookupByIndex(idx int64) (datamodel.Node, error) {
	if n.Length() <= idx {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n List__Provider) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "ipldsch.List__Provider", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (List__Provider) MapIterator() datamodel.MapIterator {
	return nil
}
func (n List__Provider) ListIterator() datamodel.ListIterator {
	return &_List__Provider__ListItr{n, 0}
}

type _List__Provider__ListItr struct {
	n   List__Provider
	idx int
}

func (itr *_List__Provider__ListItr) Next() (idx int64, v datamodel.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, datamodel.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_List__Provider__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n List__Provider) Length() int64 {
	return int64(len(n.x))
}
func (List__Provider) IsAbsent() bool {
	return false
}
func (List__Provider) IsNull() bool {
	return false
}
func (List__Provider) AsBool() (bool, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider"}.AsBool()
}
func (List__Provider) AsInt() (int64, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider"}.AsInt()
}
func (List__Provider) AsFloat() (float64, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider"}.AsFloat()
}
func (List__Provider) AsString() (string, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider"}.AsString()
}
func (List__Provider) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider"}.AsBytes()
}
func (List__Provider) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider"}.AsLink()
}
func (List__Provider) Prototype() datamodel.NodePrototype {
	return _List__Provider__Prototype{}
}

type _List__Provider__Prototype struct{}

func (_List__Provider__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List__Provider__Builder
	nb.Reset()
	return &nb
}

type _List__Provider__Builder struct {
	_List__Provider__Assembler
}

func (nb *_List__Provider__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__Provider__Builder) Reset() {
	var w _List__Provider
	var m schema.Maybe
	*nb = _List__Provider__Builder{_List__Provider__Assembler{w: &w, m: &m}}
}

type _List__Provider__Assembler struct {
	w     *_List__Provider
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Provider__Assembler
}

func (na *_List__Provider__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__Provider__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider"}.BeginMap(0)
}
func (na *_List__Provider__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Provider, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__Provider__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "ipldsch.List__Provider"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__Provider__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider"}.AssignBool(false)
}
func (_List__Provider__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider"}.AssignInt(0)
}
func (_List__Provider__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider"}.AssignFloat(0)
}
func (_List__Provider__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider"}.AssignString("")
}
func (_List__Provider__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider"}.AssignBytes(nil)
}
func (_List__Provider__Assembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider"}.AssignLink(nil)
}
func (na *_List__Provider__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List__Provider); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.List__Provider", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__Provider__Assembler) Prototype() datamodel.NodePrototype {
	return _List__Provider__Prototype{}
}
func (la *_List__Provider__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__Provider__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Provider{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List__Provider__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__Provider__Assembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Provider__Prototype{}
}
func (List__Provider) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n List__Provider) Representation() datamodel.Node {
	return (*_List__Provider__Repr)(n)
}

type _List__Provider__Repr _List__Provider

var _ datamodel.Node = &_List__Provider__Repr{}

func (_List__Provider__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (_List__Provider__Repr) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider.Repr"}.LookupByString("")
}
func (nr *_List__Provider__Repr) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	v, err := (List__Provider)(nr).LookupByNode(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Provider).Representation(), nil
}
func (nr *_List__Provider__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	v, err := (List__Provider)(nr).LookupByIndex(idx)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Provider).Representation(), nil
}
func (n _List__Provider__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "ipldsch.List__Provider.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_List__Provider__Repr) MapIterator() datamodel.MapIterator {
	return nil
}
func (nr *_List__Provider__Repr) ListIterator() datamodel.ListIterator {
	return &_List__Provider__ReprListItr{(List__Provider)(nr), 0}
}

type _List__Provider__ReprListItr _List__Provider__ListItr

func (itr *_List__Provider__ReprListItr) Next() (idx int64, v datamodel.Node, err error) {
	idx, v, err = (*_List__Provider__ListItr)(itr).Next()
	if err != nil || v == datamodel.Null {
		return
	}
	return idx, v.(Provider).Representation(), nil
}
func (itr *_List__Provider__ReprListItr) Done() bool {
	return (*_List__Provider__ListItr)(itr).Done()
}

func (rn *_List__Provider__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_List__Provider__Repr) IsAbsent() bool {
	return false
}
func (_List__Provider__Repr) IsNull() bool {
	return false
}
func (_List__Provider__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider.Repr"}.AsBool()
}
func (_List__Provider__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider.Repr"}.AsInt()
}
func (_List__Provider__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider.Repr"}.AsFloat()
}
func (_List__Provider__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider.Repr"}.AsString()
}
func (_List__Provider__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider.Repr"}.AsBytes()
}
func (_List__Provider__Repr) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "ipldsch.List__Provider.Repr"}.AsLink()
}
func (_List__Provider__Repr) Prototype() datamodel.NodePrototype {
	return _List__Provider__ReprPrototype{}
}

type _List__Provider__ReprPrototype struct{}

func (_List__Provider__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List__Provider__ReprBuilder
	nb.Reset()
	return &nb
}

type _List__Provider__ReprBuilder struct {
	_List__Provider__ReprAssembler
}

func (nb *_List__Provider__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__Provider__ReprBuilder) Reset() {
	var w _List__Provider
	var m schema.Maybe
	*nb = _List__Provider__ReprBuilder{_List__Provider__ReprAssembler{w: &w, m: &m}}
}

type _List__Provider__ReprAssembler struct {
	w     *_List__Provider
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Provider__ReprAssembler
}

func (na *_List__Provider__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__Provider__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider.Repr"}.BeginMap(0)
}
func (na *_List__Provider__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Provider, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__Provider__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "ipldsch.List__Provider.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__Provider__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider.Repr"}.AssignBool(false)
}
func (_List__Provider__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider.Repr"}.AssignInt(0)
}
func (_List__Provider__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider.Repr"}.AssignFloat(0)
}
func (_List__Provider__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider.Repr"}.AssignString("")
}
func (_List__Provider__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider.Repr"}.AssignBytes(nil)
}
func (_List__Provider__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "ipldsch.List__Provider.Repr"}.AssignLink(nil)
}
func (na *_List__Provider__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List__Provider); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.List__Provider.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__Provider__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _List__Provider__ReprPrototype{}
}
func (la *_List__Provider__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__Provider__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Provider{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List__Provider__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__Provider__ReprAssembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Provider__ReprPrototype{}
}

func (n _Peer) FieldMultiaddress() List__Bytes {
	return &n.Multiaddress
}

type _Peer__Maybe struct {
	m schema.Maybe
	v Peer
}
type MaybePeer = *_Peer__Maybe

func (m MaybePeer) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybePeer) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybePeer) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybePeer) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybePeer) Must() Peer {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__Peer_Multiaddress = _String{"Multiaddress"}
)
var _ datamodel.Node = (Peer)(&_Peer{})
var _ schema.TypedNode = (Peer)(&_Peer{})

func (Peer) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Peer) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Multiaddress":
		return &n.Multiaddress, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n Peer) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Peer) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "ipldsch.Peer"}.LookupByIndex(0)
}
func (n Peer) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Peer) MapIterator() datamodel.MapIterator {
	return &_Peer__MapItr{n, 0}
}

type _Peer__MapItr struct {
	n   Peer
	idx int
}

func (itr *_Peer__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Peer_Multiaddress
		v = &itr.n.Multiaddress
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Peer__MapItr) Done() bool {
	return itr.idx >= 1
}

func (Peer) ListIterator() datamodel.ListIterator {
	return nil
}
func (Peer) Length() int64 {
	return 1
}
func (Peer) IsAbsent() bool {
	return false
}
func (Peer) IsNull() bool {
	return false
}
func (Peer) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldsch.Peer"}.AsBool()
}
func (Peer) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldsch.Peer"}.AsInt()
}
func (Peer) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldsch.Peer"}.AsFloat()
}
func (Peer) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldsch.Peer"}.AsString()
}
func (Peer) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldsch.Peer"}.AsBytes()
}
func (Peer) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "ipldsch.Peer"}.AsLink()
}
func (Peer) Prototype() datamodel.NodePrototype {
	return _Peer__Prototype{}
}

type _Peer__Prototype struct{}

func (_Peer__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Peer__Builder
	nb.Reset()
	return &nb
}

type _Peer__Builder struct {
	_Peer__Assembler
}

func (nb *_Peer__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Peer__Builder) Reset() {
	var w _Peer
	var m schema.Maybe
	*nb = _Peer__Builder{_Peer__Assembler{w: &w, m: &m}}
}

type _Peer__Assembler struct {
	w     *_Peer
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm              schema.Maybe
	ca_Multiaddress _List__Bytes__Assembler
}

func (na *_Peer__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Multiaddress.reset()
}

var (
	fieldBit__Peer_Multiaddress = 1 << 0
	fieldBits__Peer_sufficient  = 0 + 1<<0
)

func (na *_Peer__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Peer{}
	}
	return na, nil
}
func (_Peer__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer"}.BeginList(0)
}
func (na *_Peer__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldsch.Peer"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Peer__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer"}.AssignBool(false)
}
func (_Peer__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer"}.AssignInt(0)
}
func (_Peer__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer"}.AssignFloat(0)
}
func (_Peer__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer"}.AssignString("")
}
func (_Peer__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer"}.AssignBytes(nil)
}
func (_Peer__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer"}.AssignLink(nil)
}
func (na *_Peer__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Peer); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.Peer", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Peer__Assembler) Prototype() datamodel.NodePrototype {
	return _Peer__Prototype{}
}
func (ma *_Peer__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Multiaddress.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Peer__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Multiaddress":
		if ma.s&fieldBit__Peer_Multiaddress != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Peer_Multiaddress}
		}
		ma.s += fieldBit__Peer_Multiaddress
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Multiaddress.w = &ma.w.Multiaddress
		ma.ca_Multiaddress.m = &ma.cm
		return &ma.ca_Multiaddress, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "ipldsch.Peer", Key: &_String{k}}
}
func (ma *_Peer__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Peer__KeyAssembler)(ma)
}
func (ma *_Peer__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Multiaddress.w = &ma.w.Multiaddress
		ma.ca_Multiaddress.m = &ma.cm
		return &ma.ca_Multiaddress
	default:
		panic("unreachable")
	}
}
func (ma *_Peer__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Peer_sufficient != fieldBits__Peer_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__Peer_Multiaddress == 0 {
			err.Missing = append(err.Missing, "Multiaddress")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Peer__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Peer__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _Peer__KeyAssembler _Peer__Assembler

func (_Peer__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.KeyAssembler"}.BeginMap(0)
}
func (_Peer__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.KeyAssembler"}.BeginList(0)
}
func (na *_Peer__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.KeyAssembler"}.AssignNull()
}
func (_Peer__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.KeyAssembler"}.AssignBool(false)
}
func (_Peer__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.KeyAssembler"}.AssignInt(0)
}
func (_Peer__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Peer__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Multiaddress":
		if ka.s&fieldBit__Peer_Multiaddress != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Peer_Multiaddress}
		}
		ka.s += fieldBit__Peer_Multiaddress
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	default:
		return schema.ErrInvalidKey{TypeName: "ipldsch.Peer", Key: &_String{k}}
	}
}
func (_Peer__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.KeyAssembler"}.AssignBytes(nil)
}
func (_Peer__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Peer__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Peer__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (Peer) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Peer) Representation() datamodel.Node {
	return (*_Peer__Repr)(n)
}

type _Peer__Repr _Peer

var (
	fieldName__Peer_Multiaddress_serial = _String{"Multiaddress"}
)
var _ datamodel.Node = &_Peer__Repr{}

func (_Peer__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_Peer__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Multiaddress":
		return n.Multiaddress.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_Peer__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Peer__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "ipldsch.Peer.Repr"}.LookupByIndex(0)
}
func (n _Peer__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Peer__Repr) MapIterator() datamodel.MapIterator {
	return &_Peer__ReprMapItr{n, 0}
}

type _Peer__ReprMapItr struct {
	n   *_Peer__Repr
	idx int
}

func (itr *_Peer__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 1 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Peer_Multiaddress_serial
		v = itr.n.Multiaddress.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Peer__ReprMapItr) Done() bool {
	return itr.idx >= 1
}
func (_Peer__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_Peer__Repr) Length() int64 {
	l := 1
	return int64(l)
}
func (_Peer__Repr) IsAbsent() bool {
	return false
}
func (_Peer__Repr) IsNull() bool {
	return false
}
func (_Peer__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldsch.Peer.Repr"}.AsBool()
}
func (_Peer__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldsch.Peer.Repr"}.AsInt()
}
func (_Peer__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldsch.Peer.Repr"}.AsFloat()
}
func (_Peer__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldsch.Peer.Repr"}.AsString()
}
func (_Peer__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldsch.Peer.Repr"}.AsBytes()
}
func (_Peer__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "ipldsch.Peer.Repr"}.AsLink()
}
func (_Peer__Repr) Prototype() datamodel.NodePrototype {
	return _Peer__ReprPrototype{}
}

type _Peer__ReprPrototype struct{}

func (_Peer__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Peer__ReprBuilder
	nb.Reset()
	return &nb
}

type _Peer__ReprBuilder struct {
	_Peer__ReprAssembler
}

func (nb *_Peer__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Peer__ReprBuilder) Reset() {
	var w _Peer
	var m schema.Maybe
	*nb = _Peer__ReprBuilder{_Peer__ReprAssembler{w: &w, m: &m}}
}

type _Peer__ReprAssembler struct {
	w     *_Peer
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm              schema.Maybe
	ca_Multiaddress _List__Bytes__ReprAssembler
}

func (na *_Peer__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Multiaddress.reset()
}
func (na *_Peer__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Peer{}
	}
	return na, nil
}
func (_Peer__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer.Repr"}.BeginList(0)
}
func (na *_Peer__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldsch.Peer.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Peer__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer.Repr"}.AssignBool(false)
}
func (_Peer__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer.Repr"}.AssignInt(0)
}
func (_Peer__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer.Repr"}.AssignFloat(0)
}
func (_Peer__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer.Repr"}.AssignString("")
}
func (_Peer__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer.Repr"}.AssignBytes(nil)
}
func (_Peer__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Peer.Repr"}.AssignLink(nil)
}
func (na *_Peer__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Peer); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.Peer.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Peer__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Peer__ReprPrototype{}
}
func (ma *_Peer__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Peer__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Multiaddress":
		if ma.s&fieldBit__Peer_Multiaddress != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Peer_Multiaddress_serial}
		}
		ma.s += fieldBit__Peer_Multiaddress
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Multiaddress.w = &ma.w.Multiaddress
		ma.ca_Multiaddress.m = &ma.cm
		return &ma.ca_Multiaddress, nil
	default:
	}
	return nil, schema.ErrInvalidKey{TypeName: "ipldsch.Peer.Repr", Key: &_String{k}}
}
func (ma *_Peer__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Peer__ReprKeyAssembler)(ma)
}
func (ma *_Peer__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Multiaddress.w = &ma.w.Multiaddress
		ma.ca_Multiaddress.m = &ma.cm
		return &ma.ca_Multiaddress
	default:
		panic("unreachable")
	}
}
func (ma *_Peer__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Peer_sufficient != fieldBits__Peer_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__Peer_Multiaddress == 0 {
			err.Missing = append(err.Missing, "Multiaddress")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Peer__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Peer__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _Peer__ReprKeyAssembler _Peer__ReprAssembler

func (_Peer__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Peer__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Peer__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.Repr.KeyAssembler"}.AssignNull()
}
func (_Peer__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Peer__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Peer__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Peer__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Multiaddress":
		if ka.s&fieldBit__Peer_Multiaddress != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Peer_Multiaddress_serial}
		}
		ka.s += fieldBit__Peer_Multiaddress
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "ipldsch.Peer.Repr", Key: &_String{k}}
}
func (_Peer__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Peer__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Peer.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Peer__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Peer__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n _Provider) AsInterface() _Provider__iface {
	switch n.tag {
	case 1:
		return &n.x1
	default:
		panic("invalid union state; how did you create this object?")
	}
}

type _Provider__Maybe struct {
	m schema.Maybe
	v Provider
}
type MaybeProvider = *_Provider__Maybe

func (m MaybeProvider) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeProvider) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeProvider) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeProvider) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeProvider) Must() Provider {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	memberName__Provider_Peer = _String{"Peer"}
)
var _ datamodel.Node = (Provider)(&_Provider{})
var _ schema.TypedNode = (Provider)(&_Provider{})

func (Provider) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Provider) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Peer":
		if n.tag != 1 {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return &n.x1, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n Provider) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Provider) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "ipldsch.Provider"}.LookupByIndex(0)
}
func (n Provider) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Provider) MapIterator() datamodel.MapIterator {
	return &_Provider__MapItr{n, false}
}

type _Provider__MapItr struct {
	n    Provider
	done bool
}

func (itr *_Provider__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.done {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		k, v = &memberName__Provider_Peer, &itr.n.x1
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Provider__MapItr) Done() bool {
	return itr.done
}

func (Provider) ListIterator() datamodel.ListIterator {
	return nil
}
func (Provider) Length() int64 {
	return 1
}
func (Provider) IsAbsent() bool {
	return false
}
func (Provider) IsNull() bool {
	return false
}
func (Provider) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldsch.Provider"}.AsBool()
}
func (Provider) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldsch.Provider"}.AsInt()
}
func (Provider) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldsch.Provider"}.AsFloat()
}
func (Provider) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldsch.Provider"}.AsString()
}
func (Provider) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldsch.Provider"}.AsBytes()
}
func (Provider) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "ipldsch.Provider"}.AsLink()
}
func (Provider) Prototype() datamodel.NodePrototype {
	return _Provider__Prototype{}
}

type _Provider__Prototype struct{}

func (_Provider__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Provider__Builder
	nb.Reset()
	return &nb
}

type _Provider__Builder struct {
	_Provider__Assembler
}

func (nb *_Provider__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Provider__Builder) Reset() {
	var w _Provider
	var m schema.Maybe
	*nb = _Provider__Builder{_Provider__Assembler{w: &w, m: &m}}
}

type _Provider__Assembler struct {
	w     *_Provider
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 _Peer__Assembler
	ca  uint
}

func (na *_Provider__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Provider__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Provider{}
	}
	return na, nil
}
func (_Provider__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider"}.BeginList(0)
}
func (na *_Provider__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldsch.Provider"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Provider__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider"}.AssignBool(false)
}
func (_Provider__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider"}.AssignInt(0)
}
func (_Provider__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider"}.AssignFloat(0)
}
func (_Provider__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider"}.AssignString("")
}
func (_Provider__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider"}.AssignBytes(nil)
}
func (_Provider__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider"}.AssignLink(nil)
}
func (na *_Provider__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Provider); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.Provider", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Provider__Assembler) Prototype() datamodel.NodePrototype {
	return _Provider__Prototype{}
}
func (ma *_Provider__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Provider__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "ipldsch.Provider", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Peer":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "ipldsch.Provider", Key: &_String{k}}
}
func (ma *_Provider__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Provider__KeyAssembler)(ma)
}
func (ma *_Provider__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 1:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	default:
		panic("unreachable")
	}
}
func (ma *_Provider__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldsch.Provider", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Provider__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Provider__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	switch k {
	case "Peer":
		return _Peer__Prototype{}
	default:
		return nil
	}
}

type _Provider__KeyAssembler _Provider__Assembler

func (_Provider__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.KeyAssembler"}.BeginMap(0)
}
func (_Provider__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.KeyAssembler"}.BeginList(0)
}
func (na *_Provider__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.KeyAssembler"}.AssignNull()
}
func (_Provider__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.KeyAssembler"}.AssignBool(false)
}
func (_Provider__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.KeyAssembler"}.AssignInt(0)
}
func (_Provider__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Provider__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldsch.Provider", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Peer":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "ipldsch.Provider", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_Provider__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.KeyAssembler"}.AssignBytes(nil)
}
func (_Provider__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Provider__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Provider__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (Provider) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Provider) Representation() datamodel.Node {
	return (*_Provider__Repr)(n)
}

type _Provider__Repr _Provider

var (
	memberName__Provider_Peer_serial = _String{"peer"}
)
var _ datamodel.Node = &_Provider__Repr{}

func (_Provider__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_Provider__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "peer":
		if n.tag != 1 {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.x1.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_Provider__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Provider__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "ipldsch.Provider.Repr"}.LookupByIndex(0)
}
func (n _Provider__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Provider__Repr) MapIterator() datamodel.MapIterator {
	return &_Provider__ReprMapItr{n, false}
}

type _Provider__ReprMapItr struct {
	n    *_Provider__Repr
	done bool
}

func (itr *_Provider__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.done {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.n.tag {
	case 1:
		k, v = &memberName__Provider_Peer_serial, itr.n.x1.Representation()
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Provider__ReprMapItr) Done() bool {
	return itr.done
}

func (_Provider__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (_Provider__Repr) Length() int64 {
	return 1
}
func (_Provider__Repr) IsAbsent() bool {
	return false
}
func (_Provider__Repr) IsNull() bool {
	return false
}
func (_Provider__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "ipldsch.Provider.Repr"}.AsBool()
}
func (_Provider__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "ipldsch.Provider.Repr"}.AsInt()
}
func (_Provider__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "ipldsch.Provider.Repr"}.AsFloat()
}
func (_Provider__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "ipldsch.Provider.Repr"}.AsString()
}
func (_Provider__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "ipldsch.Provider.Repr"}.AsBytes()
}
func (_Provider__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "ipldsch.Provider.Repr"}.AsLink()
}
func (_Provider__Repr) Prototype() datamodel.NodePrototype {
	return _Provider__ReprPrototype{}
}

type _Provider__ReprPrototype struct{}

func (_Provider__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Provider__ReprBuilder
	nb.Reset()
	return &nb
}

type _Provider__ReprBuilder struct {
	_Provider__ReprAssembler
}

func (nb *_Provider__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Provider__ReprBuilder) Reset() {
	var w _Provider
	var m schema.Maybe
	*nb = _Provider__ReprBuilder{_Provider__ReprAssembler{w: &w, m: &m}}
}

type _Provider__ReprAssembler struct {
	w     *_Provider
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 _Peer__ReprAssembler
	ca  uint
}

func (na *_Provider__ReprAssembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Provider__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Provider{}
	}
	return na, nil
}
func (_Provider__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider.Repr"}.BeginList(0)
}
func (na *_Provider__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "ipldsch.Provider.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Provider__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider.Repr"}.AssignBool(false)
}
func (_Provider__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider.Repr"}.AssignInt(0)
}
func (_Provider__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider.Repr"}.AssignFloat(0)
}
func (_Provider__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider.Repr"}.AssignString("")
}
func (_Provider__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider.Repr"}.AssignBytes(nil)
}
func (_Provider__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "ipldsch.Provider.Repr"}.AssignLink(nil)
}
func (na *_Provider__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Provider); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "ipldsch.Provider.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Provider__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Provider__ReprPrototype{}
}
func (ma *_Provider__ReprAssembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Provider__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "ipldsch.Provider.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "peer":
		ma.state = maState_midValue
		ma.ca = 1
		ma.w.tag = 1
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "ipldsch.Provider.Repr", Key: &_String{k}}
}
func (ma *_Provider__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Provider__ReprKeyAssembler)(ma)
}
func (ma *_Provider__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 1:
		ma.ca1.w = &ma.w.x1
		ma.ca1.m = &ma.cm
		return &ma.ca1
	default:
		panic("unreachable")
	}
}
func (ma *_Provider__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldsch.Provider.Repr", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Provider__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Provider__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	switch k {
	case "Peer":
		return _Peer__ReprPrototype{}
	default:
		return nil
	}
}

type _Provider__ReprKeyAssembler _Provider__ReprAssembler

func (_Provider__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Provider__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Provider__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.Repr.KeyAssembler"}.AssignNull()
}
func (_Provider__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Provider__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Provider__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Provider__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "ipldsch.Provider.Repr", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "peer":
		ka.ca = 1
		ka.w.tag = 1
		ka.state = maState_expectValue
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "ipldsch.Provider.Repr", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_Provider__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Provider__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "ipldsch.Provider.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Provider__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Provider__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n String) String() string {
	return n.x
}
func (_String__Prototype) fromString(w *_String, v string) error {
	*w = _String{v}
	return nil
}
func (_String__Prototype) FromString(v string) (String, error) {
	n := _String{v}
	return &n, nil
}

type _String__Maybe struct {
	m schema.Maybe
	v _String
}
type MaybeString = *_String__Maybe

func (m MaybeString) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeString) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeString) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeString) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeString) Must() String {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (String)(&_String{})
var _ schema.TypedNode = (String)(&_String{})

func (String) Kind() datamodel.Kind {
	return datamodel.Kind_String
}
func (String) LookupByString(string) (datamodel.Node, error) {
	return mixins.String{TypeName: "ipldsch.String"}.LookupByString("")
}
func (String) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.String{TypeName: "ipldsch.String"}.LookupByNode(nil)
}
func (String) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.String{TypeName: "ipldsch.String"}.LookupByIndex(0)
}
func (String) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.String{TypeName: "ipldsch.String"}.LookupBySegment(seg)
}
func (String) MapIterator() datamodel.MapIterator {
	return nil
}
func (String) ListIterator() datamodel.ListIterator {
	return nil
}
func (String) Length() int64 {
	return -1
}
func (String) IsAbsent() bool {
	return false
}
func (String) IsNull() bool {
	return false
}
func (String) AsBool() (bool, error) {
	return mixins.String{TypeName: "ipldsch.String"}.AsBool()
}
func (String) AsInt() (int64, error) {
	return mixins.String{TypeName: "ipldsch.String"}.AsInt()
}
func (String) AsFloat() (float64, error) {
	return mixins.String{TypeName: "ipldsch.String"}.AsFloat()
}
func (n String) AsString() (string, error) {
	return n.x, nil
}
func (String) AsBytes() ([]byte, error) {
	return mixins.String{TypeName: "ipldsch.String"}.AsBytes()
}
func (String) AsLink() (datamodel.Link, error) {
	return mixins.String{TypeName: "ipldsch.String"}.AsLink()
}
func (String) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

type _String__Prototype struct{}

func (_String__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _String__Builder
	nb.Reset()
	return &nb
}

type _String__Builder struct {
	_String__Assembler
}

func (nb *_String__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_String__Builder) Reset() {
	var w _String
	var m schema.Maybe
	*nb = _String__Builder{_String__Assembler{w: &w, m: &m}}
}

type _String__Assembler struct {
	w *_String
	m *schema.Maybe
}

func (na *_String__Assembler) reset() {}
func (_String__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.String"}.BeginMap(0)
}
func (_String__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "ipldsch.String"}.BeginList(0)
}
func (na *_String__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{TypeName: "ipldsch.String"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_String__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "ipldsch.String"}.AssignBool(false)
}
func (_String__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.String"}.AssignInt(0)
}
func (_String__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "ipldsch.String"}.AssignFloat(0)
}
func (na *_String__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_String__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "ipldsch.String"}.AssignBytes(nil)
}
func (_String__Assembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "ipldsch.String"}.AssignLink(nil)
}
func (na *_String__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_String); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_String__Assembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (String) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n String) Representation() datamodel.Node {
	return (*_String__Repr)(n)
}

type _String__Repr = _String

var _ datamodel.Node = &_String__Repr{}

type _String__ReprPrototype = _String__Prototype
type _String__ReprAssembler = _String__Assembler
